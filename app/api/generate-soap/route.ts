// app/api/generate-soap/route.ts
import { NextRequest, NextResponse } from "next/server";
import OpenAI from "openai";

export const runtime = "nodejs";

const MODEL = process.env.OPENAI_MODEL || "gpt-4o-mini";
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY! });

function kgToLbOz(kg?: number | string) {
  const k = typeof kg === "string" ? Number(kg) : kg;
  if (!k || !isFinite(k)) return null;
  const totalLb = k * 2.20462;
  const lb = Math.floor(totalLb);
  const oz = Math.round((totalLb - lb) * 16);
  return { lb, oz, kg: +k.toFixed(2) };
}
function todayISO() { return new Date().toISOString().slice(0, 10); }

function buildDeltaV2025Prompt(input: {
  animalName: string; dateISO: string; location?: string; signalment?: string;
  history?: string; clinicalFindings?: string; weightKg?: string;
  planOverride?: string; previousSOAPs?: string[];
}) {
  const { animalName, dateISO, location, signalment, history, clinicalFindings, weightKg, planOverride, previousSOAPs } = input;

  let weightHeader = "‚Äî";
  const w = kgToLbOz(weightKg ?? "");
  if (w) { const ozPad = String(w.oz); weightHeader = `${w.lb} lb ${ozPad} oz (${w.kg.toFixed(2)} kg)`; }

  const prior = (previousSOAPs ?? []).filter(Boolean).map((t, i) => `#${i + 1}: ${t?.slice(0, 1500)}`).join("\n\n");
  const planNote = planOverride?.trim() ? `\nClinician Plan Override (verbatim; do not alter):\n"""${planOverride.trim()}"""\n` : "";

  return `
You are a veterinary scribe for DELTA Rescue. Output ONE SOAP that matches this template EXACTLY, including headings, icons, and ordering. 
NEVER invent data; if unknown, write ‚Äú‚Äî‚Äù. If weight available, keep header "Weight: __ lb __ oz (__ kg)". 
Include explicit dose math (mg/kg and mL) ONLY when weight is provided; otherwise show drug text verbatim without math.

üêæ [PATIENT FIRST NAME IN ALL CAPS] üêæ
DELTA RESCUE VETERINARY SOAP
üè¢ Nonprofit Owner: DELTA Rescue ‚Ä¢ [Address] ‚Ä¢ [Phone/Email]
üìÖ Date/Time: ${dateISO}    ‚Ä¢    üìç Location/Run: ${location || "‚Äî"}    ‚Ä¢    üÜî ID/Microchip: on file
üë§ Decision-Maker: DELTA Team
Chief Complaint: [‚Äî]    ‚Ä¢    VCPR: ‚òê Established ‚òê Confirmed (Date: ‚Äî)
Vaccines: [‚Äî]
üêæ Species/Breed: [‚Äî]    ‚Ä¢    ‚ôÇÔ∏è/‚ôÄÔ∏è Sex: [‚Äî]    ‚Ä¢    üéÇ Age: [‚Äî y ‚Äî m]    ‚Ä¢    üé® Color: [‚Äî]
‚öñÔ∏è Weight: ${weightHeader}    ‚Ä¢    üå°Ô∏è‚ù§Ô∏èüå¨Ô∏è TPR: [‚Äî ¬∞F / ‚Äî bpm / ‚Äî bpm]
üç© BCS: [‚Äî/9]    ‚Ä¢    üíß Hydration: [‚Äî%]    ‚Ä¢    üëÖ‚è±Ô∏è CRT: [‚Äî s]
Other Vitals: [‚Äî]
Intake Condition: [‚Äî]
üö´ Allergies: [‚Äî]    ‚Ä¢    üçΩÔ∏è Diet/Environment: [‚Äî]
ü´Å ASA (if sed/GA): [‚Äî]

üß© Master Problem List
‚ë† [Problem] ‚Ä¢ Onset: [‚Äî] ‚Ä¢ Severity: üü¢/üü†/üî¥ ‚Ä¢ Status: ‚¨ÜÔ∏è/‚û°Ô∏è/‚¨áÔ∏è/‚úÖ
‚ë° [Problem] ‚Ä¢ Onset: [‚Äî] ‚Ä¢ Severity: üü¢/üü†/üî¥ ‚Ä¢ Status: ‚¨ÜÔ∏è/‚û°Ô∏è/‚¨áÔ∏è/‚úÖ
‚ë¢ [Problem] ‚Ä¢ Onset: [‚Äî] ‚Ä¢ Severity: üü¢/üü†/üî¥ ‚Ä¢ Status: ‚¨ÜÔ∏è/‚û°Ô∏è/‚¨áÔ∏è/‚úÖ
Chronic Conditions: [‚Äî]
Prior Treatments/Consults: [‚Äî]

üíä Current Medications
‚Ä¢ [Drug] ‚Äî [__ mg/kg], Route: [__], Frequency: [__], Start‚ÄìStop: [__], Source: ‚òê In-House ‚òê External Pharmacy
‚Ä¢ ‚òê None Ongoing
Dispensed Today: [‚Äî]

üó£Ô∏è S ‚Äî Subjective
‚Ä¢ Appetite: [‚Äî]
‚Ä¢ Energy: [‚Äî]
‚Ä¢ Elimination: [‚Äî]
‚Ä¢ Behavior: [‚Äî]
‚Ä¢ Environmental History: [‚Äî]
‚Ä¢ Reported By: [‚Äî]
‚Ä¢ Caregiver Notes: [‚Äî]
‚Ä¢ Consent: Via DELTA Protocol (High-Risk Procedure? ‚òê Yes [Details: ‚Äî])

üîç O ‚Äî Objective
ü©∫ Focused Physical Exam:
‚Ä¢ Pain: [‚Äî/10] ‚Ä¢ BCS/MM: [‚Äî/9] ‚Ä¢ Hydration: [‚Äî%]
‚Ä¢ Eyes: N/A/Abn (‚Äî) ‚Ä¢ Ears: N/A/Abn (‚Äî) ‚Ä¢ Oral: N/A/Abn (‚Äî)
‚Ä¢ Cardio: N/A/Abn (‚Äî) ‚Ä¢ Resp: N/A/Abn (‚Äî) ‚Ä¢ Abd: N/A/Abn (‚Äî)
‚Ä¢ Neuro: N/A/Abn (‚Äî) ‚Ä¢ MSK: N/A/Abn (‚Äî) ‚Ä¢ Wounds: N/A/Abn (‚Äî)
Initial Intake Exam Reference: [‚Äî]
üß™ Diagnostics & Procedures: [‚Äî]
Procedure Details: [‚Äî]
üì∏ Imaging: [‚Äî]
üìä Data & Trends: [Weights: ‚Äî; TPRs: ‚Äî; Labs: ‚Äî]

üß† A ‚Äî Assessment
‚ë† Problem: [‚Äî] ‚Äî Tentative Dx: [‚Äî]; ddx {‚Äî}; Brief Pathophys: [‚Äî]; Risk: üü¢/üü†/üî¥
‚ë° Problem: [‚Äî] ‚Äî Tentative Dx: [‚Äî]; ddx {‚Äî}; Brief Pathophys: [‚Äî]; Risk: üü¢/üü†/üî¥
‚ë¢ Problem: [‚Äî] ‚Äî Tentative Dx: [‚Äî]; ddx {‚Äî}; Brief Pathophys: [‚Äî]; Risk: üü¢/üü†/üî¥
Stability: [Stable/Evolving/Decompensating]
Prognosis: üü¢ Good / üü† Guarded / üî¥ Poor

üß≠ P ‚Äî Plan
‚ë† Problem: ‚úÖ Dx Today {‚Äî} ‚Ä¢ Labs {‚Äî} ‚Ä¢ Tx {‚Äî} ‚Ä¢ üìÖ Recheck {‚Äî}
‚ë° Problem: ‚úÖ {‚Äî} ‚Ä¢ Labs {‚Äî} ‚Ä¢ Tx {‚Äî}
‚ë¢ Problem: ‚úÖ {‚Äî} ‚Ä¢ Labs {‚Äî} ‚Ä¢ Tx {‚Äî}
Antimicrobial Stewardship: Indication {‚Äî} ‚Ä¢ Culture? ‚òê Y ‚òê N ‚Ä¢ Duration {‚Äî}
Analgesia Ladder: [‚Äî]
Enrichment & Handling: [‚Äî]
Disposition: ‚òê Continue Inpatient ‚òê Return to Shelter [Location: ‚Äî]
Declined Care: ‚òê [‚Äî]

üîÅ Daily Progress & Disposition
‚Ä¢ Date/Time: [‚Äî] ‚Ä¢ Change: Better/Same/Worse ‚Ä¢ Rationale: [‚Äî]
‚Ä¢ Current Location: [‚Äî]

üßë‚Äç‚öïÔ∏è Tech Notes
‚Ä¢ [‚Äî]

üìã Summary
‚Ä¢ [‚Äî]
‚Ä¢ External Data: [‚Äî]
‚Ä¢ Audit Trail/Amendments: [‚Äî]

INPUT CONTEXT (verbatim, do not add new facts):
Name: ${animalName}
Signalment: ${signalment || "‚Äî"}
Tech Notes (history): ${history || "‚Äî"}
Clinical Findings: ${clinicalFindings || "‚Äî"}
${planNote}
Prior SOAPs (if any): 
${prior || "‚Äî"}
`;
}

function requiresSections(soap: string) {
  const must = [
    "DELTA RESCUE VETERINARY SOAP",
    "Master Problem List",
    "Current Medications",
    "S ‚Äî Subjective",
    "O ‚Äî Objective",
    "A ‚Äî Assessment",
    "P ‚Äî Plan",
    "Daily Progress & Disposition",
    "Tech Notes",
    "Summary",
  ];
  return must.filter((m) => !soap.includes(m));
}

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const {
      animalName = "UNKNOWN",
      signalment = "",
      history = "",
      clinicalFindings = "",
      weight = "",
      location = "",
      planOverride = "",
      useHistory = true,
      previousSOAPs = [],
      layout = "delta-v2025-09",
    } = body || {};

    const dateISO = todayISO();

    const prompt =
      layout === "delta-v2025-09"
        ? buildDeltaV2025Prompt({
            animalName,
            dateISO,
            location,
            signalment,
            history,
            clinicalFindings,
            weightKg: weight || "",
            planOverride,
            previousSOAPs: useHistory ? previousSOAPs : [],
          })
        : `Reformat succinct SOAP for ${animalName} with classic S/O/A/P. Avoid missing data invention. Context:\n${JSON.stringify(
            { signalment, history, clinicalFindings, location, weight },
            null,
            2
          )}`;

    const first = await openai.chat.completions.create({
      model: MODEL,
      temperature: 0.2,
      messages: [{ role: "user", content: prompt }],
    });

    let soap = first.choices[0]?.message?.content?.trim() || "";

    const missing = requiresSections(soap);
    if (layout === "delta-v2025-09" && missing.length) {
      const repair = await openai.chat.completions.create({
        model: MODEL,
        temperature: 0.1,
        messages: [{
          role: "user",
          content: prompt + `\n\nYou omitted required sections: ${missing.join(", ")}.\nRegenerate the SOAP USING THE EXACT TEMPLATE and include EVERY missing section.`,
        }],
      });
      soap = repair.choices[0]?.message?.content?.trim() || soap;
    }

    if (!soap.startsWith("üêæ")) {
      soap = `üêæ ${(animalName || "UNKNOWN").toUpperCase()} üêæ\n` + soap;
    }

    return NextResponse.json({ soapNote: soap }, { status: 200 });
  } catch (e: any) {
    console.error("generate-soap error:", e);
    return NextResponse.json({ error: e?.message || "generation failed" }, { status: 500 });
  }
}
